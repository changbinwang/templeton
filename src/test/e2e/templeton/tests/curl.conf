###############################################################################
# curl command tests for templeton
#
#

#use Yahoo::Miners::Test::PigSetup;

#PigSetup::setup();

#my $me = `whoami`;
#chomp $me;

$cfg = {
  'driver' => 'Curl',

  'groups' => [
#     {
#       'name' => 'TestWebHdfsReadOps',
#       'tests' => [
#         {
#           #check for presence of /tmp 
#           'num' => 1,
# 	  'method' => 'GET',
#           'url' => ':WEBHDFS_URL:/webhdfs/v1/tmp?op=liststatus&user.name=:UNAME:',
	  
# 	  #results
# 	  'status_code' => 200,
#         },
#         {
#           #check for presence of /tmp_nosuchfile (not present)
#           'num' => 2,
# 	  'method' => 'GET',
#           'url' => ':WEBHDFS_URL:/webhdfs/v1/tmp_nosuchfile?op=liststatus&user.name=:UNAME:',
	  
# 	  #results
# 	  'status_code' => 404,
#         },
#       ]
#     },
#     {
#       'name' => 'TestWebHdfsWrite',
#       'tests' => [
#         {
#           #write a file to /tmp
#           'num' => 1,
# 	  'method' => 'GET',
#           'url' => ':WEBHDFS_URL:/webhdfs/v1/tmp/nums.txt?op=create&user.name=:UNAME:',
# 	  'upload_file' => ':INPDIR_LOCAL:/nums.txt',
# 	  #results
# 	  'status_code' => 100,
#         },

#       ]
#     },

    {
      'name' => 'Hcat_table',
      'tests' => [
        {
          #drop table if exists
          'num' => 1,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=drop table if exists templetontest_tab2'],
	  'json_field_substr_match' => {'stderr' => 'OK'},

        },
        {
          #create table
          'num' => 2,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=create table templetontest_tab2(i int, j bigint) STORED AS rcfile;'],
	  'json_field_substr_match' => {'stderr' => 'OK', 'exitcode' => '^0$'}
        },
        {
          #show tables
          'num' => 3,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=show tables;'],
	  'json_field_substr_match' => {'stderr' => 'OK', 'stdout' => 'templetontest_tab2', 'exitcode' => '^0$'}
        },
        {
          #create table again, should fail
          'num' => 4,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=create table templetontest_tab2(i int, j bigint) STORED AS rcfile;'],
	  'json_field_substr_match' => { 'exitcode' => '^9$'}
        },
        {
          #describe table
          'num' => 5,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=describe templetontest_tab2;'],
	  'json_field_substr_match' => { 'stdout' => '.*i\s+int.*\n.*j.*bigint.*', 'exitcode' => '^0$', 'stderr' => 'OK'}
        },
        {
          #alter table - file format
          'num' => 6,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=alter table templetontest_tab2 SET FILEFORMAT rcfile;'],
	  'json_field_substr_match' => { 'exitcode' => '^0$', 'stderr' => 'OK'}
        },
        {
          #alter table - add column
          'num' => 7,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=alter table templetontest_tab2 add columns(newcolx int);'],
	  'json_field_substr_match' => { 'exitcode' => '^0$', 'stderr' => 'OK'}
        },
        {
          #describe table
          'num' => 8,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=describe templetontest_tab2;'],
	  'json_field_substr_match' => { 'stdout' => '.*newcolx\s+int.*', 'exitcode' => '^0$', 'stderr' => 'OK'}
        },
      ]
    },

    {
      'name' => 'TestStreaming',
      'tests' => [
        {
          'num' => 1,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/mapreduce/streaming',
	  'post_options' => ['user.name=:UNAME:','input=:INPDIR_HDFS:/nums.txt','output=:OUTDIR:/mycounts', 
			     'mapper=/bin/cat', 'reducer=/usr/bin/wc'],
	  'json_field_substr_match' => { 'stdout' => '.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', #TODO - implement this check
	  'check_call_back' => 1,
        },
      ]
    },

    {
      'name' => 'TestMapReduce',
      'tests' => [
        {

          'num' => 1,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/mapreduce/jar',
	  'post_options' => ['user.name=:UNAME:','arg=:INPDIR_HDFS:/nums.txt', 'arg= :OUTDIR:/wc.txt', 
			     'jar=:INPDIR_HDFS:/hexamples.jar', 'class=wordcount', ],
	  'json_field_substr_match' => { 'stdout' => '.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', #TODO - implement this check
	  'check_call_back' => 1,
        },
      ]
    },

    {
      'name' => 'TestPig',
      'tests' => [
        {
	  #test syntax error
          'num' => 1,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/pig.json',
	  'post_options' => ['user.name=:UNAME:','execute=asdf', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'FAILURE', 
	  'check_call_back' => 1,
        },
        {
	  #valid syntax, hdfs operation through pig
          'num' => 2,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/pig.json',
	  'post_options' => ['user.name=:UNAME:','execute=fs -ls :INPDIR_HDFS:;', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,
        },
        {
	  #syntax check  - valid syntax
          'num' => 3,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/pig.json',
	  'post_options' => ['user.name=:UNAME:','arg=-check', 'file=:INPDIR_HDFS:/loadstore.pig', 'arg=-p', 'arg=INPDIR=:INPDIR_HDFS:','arg=-p', 'arg=OUTDIR=:OUTDIR:', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,
        },
        {
	  #syntax check cmd - valid syntax
          'num' => 4,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/pig.json',
	  'post_options' => ['user.name=:UNAME:', 'arg=-d', 'arg=INFO' , 'execute=fs -ls :INPDIR_HDFS: ', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,
        },

        {
	  #a simple load store script
          'num' => 5,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/pig.json',
	  'post_options' => ['user.name=:UNAME:', 'arg=-p', 'arg=INPDIR=:INPDIR_HDFS:','arg=-p', 'arg=OUTDIR=:OUTDIR:', 'file=:INPDIR_HDFS:/loadstore.pig', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,
        },


        {
	  #pig query registering jar
          'num' => 6,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/pig.json',
	  'post_options' => ['user.name=:UNAME:', 'arg=-p', 'arg=INPDIR=:INPDIR_HDFS:','arg=-p', 'arg=OUTDIR=:OUTDIR:', 'file=:INPDIR_HDFS:/jarregistered.pig',
	  		    'files=:INPDIR_HDFS:/piggybank.jar' ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,
        },

        {
	  #macro
          'num' => 7,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/pig.json',
	  'post_options' => ['user.name=:UNAME:', 'arg=-p', 'arg=INPDIR=:INPDIR_HDFS:','arg=-p', 'arg=OUTDIR=:OUTDIR:', 'file=:INPDIR_HDFS:/rowcount_withmacro.pig',
	  		    'files=:INPDIR_HDFS:/rowcountmacro.pig' ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,
        },

        {
	  #no file to be copied, should result in launcher job error 
          'num' => 8,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/pig.json',
	  'post_options' => ['user.name=:UNAME:', 'arg=-p', 'arg=INPDIR=:INPDIR_HDFS:','arg=-p', 'arg= OUTDIR=:OUTDIR:', 'file=:INPDIR_HDFS:/no_such_file.pig',
	  		    'files=:INPDIR_HDFS:/rowcountmacro.pig' ],
	  'json_field_substr_match' => { 'error' => 'does not exist'},
	  #results
	  'status_code' => 400,
        },
	


	#test 9
	#TODO jython test




      ]
    },

    {
      'name' => 'TestHive',
      'tests' => [
        {
	  #test syntax error
          'num' => 1,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/hive.json',
	  'post_options' => ['user.name=:UNAME:','execute=asdf', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'FAILURE', 

        },
 
        {
	  #test show tables
          'num' => 2,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/hive.json',
	  'post_options' => ['user.name=:UNAME:','execute=show tables', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,
        },

        {
	  #test show tables
          'num' => 3,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/hive.json',
	  'post_options' => ['user.name=:UNAME:','execute=drop table if exists mynums;', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,
        },
        {
          #test show tables
          'num' => 4,
          'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/hive.json',
          'post_options' => ['user.name=:UNAME:','execute=create external table mynums(a int, b int) location ":INPDIR_HDFS:/numstable/";', ],
          'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
          #results
          'status_code' => 200,
          'check_job_created' => 1,
          'check_job_complete' => 'SUCCESS',
          'check_call_back' => 1,
        },

        {
	  #test describe
          'num' => 5,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/hive.json',
	  'post_options' => ['user.name=:UNAME:','execute=describe formatted mynums', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
 	  'check_call_back' => 1,
        },

        {
	  #test select *
          'num' => 6,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/hive.json',
	  'post_options' => ['user.name=:UNAME:','execute=select * from mynums', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,
        },

        {
	  #test select a,b
          'num' => 7,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/hive.json',	
	  'post_options' => ['user.name=:UNAME:','execute=select a,b from mynums', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 
	  'check_call_back' => 1,

        },


        {
	  #test udfs : select a,rand(b)
          'num' => 8,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/hive.json',
	  'post_options' => ['user.name=:UNAME:','execute=select a,rand(b) from mynums', ],
	  'json_field_substr_match' => { 'stdout' => '.*templeton-job-id:.*', 'exitcode' => '^0$', 'stderr' => '.*'},
	  #results
	  'status_code' => 200,
	  'check_job_created' => 1,
	  'check_job_complete' => 'SUCCESS', 

        },



       ]
    },


    {
      'name' => 'REST_DDL_DB',
      'ignore' => 'features to be implemented',
      'tests' => [
        {
          #cleanup 
          #drop database if exists
          'num' => 1,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=drop database if exists templeton_testdb1'],
	  'json_field_substr_match' => {'stderr' => 'OK'},
        },
        {
	#create db
          'num' => 2,
	  'method' => 'PUT',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1',
	  'status_code' => 200,
        },
        {
	  #negative test - create same db again 
          'num' => 3,
	  'method' => 'PUT',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1',
	  'status_code' => 409,
        },
        { #show databases
          'num' => 4,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/',
	  'status_code' => 200,
	  'json_field_substr_match' => {'databases' => 'templeton_testdb1'},
        },
        { #desc db
          'num' => 5,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1',
	  'status_code' => 200,
	  'json_field_substr_match' => {'database_name' => 'templeton_testdb1', 'root-location' => '.*'},
        },
        { #drop db
          'num' => 6,
	  'method' => 'DELETE',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1',
	  'status_code' => 200,
        },
        {
	  #-ve test , describe on non existent db
          'num' => 7,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/test_no_such_db',
	  'status_code' => 404,
	  'json_field_substr_match' => {'error-msg' => 'No such database'},
        },
	]
  },

    {
      'name' => 'REST_DDL_TABLE_BASIC',
      'tests' => [
        {
          #setup
          #create db if not exists
          'num' => 1,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=create database if not exists templeton_testdb1;'],
	  'json_field_substr_match' => {'stderr' => 'OK'},
        },
  		  
        {
          #cleanup 
          #drop table if exists
          'num' => 2,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=use templeton_testdb1; drop table if exists templeton_testtab1'],
	  'json_field_substr_match' => {'stderr' => 'OK'},
        },
        {
          #setup
          #create table if not exists
          'num' => 3,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=use templeton_testdb1; create table if not exists templeton_testtab1 (i int, j bigint) STORED AS rcfile;'],
	  'json_field_substr_match' => {'stderr' => 'OK'},
        },

        {
	#create table
	  'ignore' => 'features to be implemented',
          'num' => 4,
	  'method' => 'PUT',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1/table/templeton_testtab1',
	  'data' => '{
	       "external" : "false", "if-not-exists": "true",
                "columns": [
                      { name => "i", type => "int" },
                      { name => "j", type => "bigint" },
                ], 
	        "stored-as" : "rcfile"
          }',
	  'status_code' => 200,
        },
        {
	  #negative test - create same table again 
	  'ignore' => 'features to be implemented',
          'num' => 5,
	  'method' => 'PUT',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1/table/templeton_testtab1',
	  'status_code' => 409,
        },
        { #show tables
	  'ignore' => 'features to be implemented',
          'num' => 6,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1/table/',
	  'status_code' => 200,
	  'json_field_substr_match' => {'tables' => 'templeton_testtab1'},
        },
        { #show tables like '%table1%'
	  'ignore' => 'features to be implemented',
          'num' => 7,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1/table/?filter-by=\'%table1%\'',
	  'status_code' => 200,
	  'json_field_substr_match' => {'tables' => 'templeton_testtab1'},
        },
        { #desc table
          'num' => 8,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1/table/templeton_testtab1?user.name=:UNAME:',
	  'status_code' => 200,
#	  'json_field_substr_match' => {'table-name' => 'templeton_testtab1'}, 
          'json_field_match_object' => { 'columns' => '[
                 { "name" : "i", "type" : "int" },
                 { "name" : "j", "type" : "bigint" }
           ]' },
        },
        { #drop table
	  'ignore' => 'features to be implemented',
          'num' => 9,
	  'method' => 'DELETE',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1/table/templeton_testtab1',
	  'status_code' => 200,
        },
        {
	  'ignore' => 'features to be implemented',
	  #-ve test , describe on non existent table
          'num' => 8,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/templeton_testdb1/table/templeton_testtab1',
	  'status_code' => 404,
	  'json_field_substr_match' => {'error-msg' => 'No such table'},
        },
	]
  },


  {	       
      'name' => 'REST_DDL_TABLE_EXTENDED',
      'tests' => [
  		  
        {
          #cleanup 
          #drop table if exists
          'num' => 1,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=drop table if exists templetontest_tabe'],
	  'json_field_substr_match' => {'stderr' => 'OK'},
        },



        {
          #setup
          #create table if not exists
          'num' => 2,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=create table  templetontest_tabe (i int, j bigint, ip STRING COMMENT "IP Address of the User")
COMMENT "This is the page view table"
 PARTITIONED BY(dt STRING, country STRING)
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY "\001"
  COLLECTION ITEMS TERMINATED BY "\002"
  MAP KEYS TERMINATED BY "\003"
STORED AS rcfile
--LOCATION "table1_location" '],
	  'json_field_substr_match' => {'stderr' => 'OK'},
        },
        { #desc table
          'num' => 3,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/default/table/templetontest_tabe?user.name=:UNAME:&format=extended',
	  'status_code' => 200,
	  
	  'json_field_substr_match' => {
	      'location'         => "templetontest_tabe",
	      'inputformat'      => "org.apache.hadoop.hive.ql.io.RCFileInputFormat",
              'lastAccessTime'   => 0,
	      'lastUpdateTime'   => 1330,
	      'maxFileSize'      => 0,
	      'minFileSize'      => 0,
	      'outputformat'     => "org.apache.hadoop.hive.ql.io.RCFileOutputFormat",
	      'owner'            => ':UNAME:',
	      'partitioned'      => "true",
	      'tableName'        => "templetontest_tabe",
	   
	  },
          'json_field_match_object' => 
	  {'columns' => '[
	      {
                  "name" : "i",
                  "type" : "int"
              },
	     {
                  "name" : "j",
                  "type" : "bigint"
              },
	     {
                  "comment" : "IP Address of the User",
                  "name" : "ip",
                  "type" : "string"
              }
            ]',
	      "partitionColumns" => '[
		{
                  "name" : "dt",
                  "type" : "string"
                },
		{
                  "name" : "country",
                  "type" : "string"
                }
              ]',
	  },
        },

    ]

    },


  {	       
      'name' => 'REST_DDL_PARTITIONS',
      'tests' => [

        {
          #cleanup 
          #drop table if exists
          'num' => 1,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:','exec=drop table if exists templetontest_parts'],
	  'json_field_substr_match' => {'stderr' => 'OK'},
        },


        {
          #setup
          #create table if not exists
          'num' => 2,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:',
          'exec=create table if not exists templetontest_parts (i int, j bigint, ip STRING COMMENT "IP Address of the User")
COMMENT "This is the page view table"
 PARTITIONED BY(dt STRING, country STRING)
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY "\001"
  COLLECTION ITEMS TERMINATED BY "\002"
  MAP KEYS TERMINATED BY "\003"
STORED AS rcfile
--LOCATION "table1_location" '],
          'json_field_substr_match' => {'stderr' => 'OK'},
        },
        {
          #setup
          #create partitions
          'num' => 3,
	  'method' => 'POST',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl',
	  'status_code' => 200,
	  'post_options' => ['user.name=:UNAME:',
            'exec=alter table templetontest_parts add partition (dt = "20120101", country = "US") location "loc1";
                  alter table templetontest_parts add partition (dt = "20120101", country = "IN") location "loc2";'
           ],
	  'json_field_substr_match' => {'stderr' => 'OK'},
        },


        { #lookup partitions
          'num' => 4,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/default/table/templetontest_parts/partition/?user.name=:UNAME:&format=extended',
	  'status_code' => 200,
          'json_field_match_object' => 
	  {
	      "partitions" => 
		 '[  
                  {
                     "name" : "dt=\'20120101\',country=\'IN\'",
                     "values" : [
		     {
                       "columnName" : "dt",
                        "columnValue" : "20120101"
        	     },
		     {
                     "columnName" : "country",
                     "columnValue" : "IN"
                    }
		    ]
	          },
		  {
		      "name" : "dt=\'20120101\',country=\'US\'",
		      "values" : [
				  {
				      "columnName" : "dt",
				      "columnValue" : "20120101"
				  },
				  {
				      "columnName" : "country",
				      "columnValue" : "US"
				   }
				  ]
		   }
               ]'

	  },
        },
        { #describe a partition
          'num' => 5,
	  'method' => 'GET',
          'url' => ':TEMPLETON_URL:/templeton/v1/ddl/database/default/table/templetontest_parts/partition/dt=\'20120101\',country=\'IN\'?user.name=:UNAME:&format=extended',
	  'status_code' => 200,
	  'json_field_substr_match' => {

	      "outputformat" => "org.apache.hadoop.hive.ql.io.RCFileOutputFormat",
	      "owner" => ":UNAME:",
	      "inputformat" => "org.apache.hadoop.hive.ql.io.RCFileInputFormat",
	      "lastAccessTime" => 0,
	      "maxFileSize" => 0,
	      "location" => "loc2",
	      "totalNumberFiles" => 0,
	      "lastUpdateTime" => 133,
	      "minFileSize" => 0,
	      "partitioned" => 'true',
	      "totalFileSize" => 0,
	      "tableName" => "templetontest_parts"
	  },
	  'json_field_match_object' => {
	      "columns" => '[
		{
		    "name" : "i",
		    "type" : "int"
		},
	       {
		   "name" : "j",
		   "type" : "bigint"
	       },
	       {
		   "comment" : "IP Address of the User",
		   "name" : "ip",
		   "type" : "string"
	      }
	    ]',

	  "partitionColumns" => '[
	      {
		  "name" : "dt",
		  "type" : "string"
	      },
	      {
		  "name" : "country",
		  "type" : "string"
	     }
          ]',
	 },
       },

    ]

}





]
},
;

