<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Notification</title>
  </header>
  <body>
  
 <p> In HCatalog 2.0 we introduce notifications for certain events happening in the system. This way applications such as Oozie can wait for those events and schedule the work that depends on them. The current version of HCatalog supports two kinds of events: </p>
<ul>
<li>Notification when a new partition is added</li>
<li>Notification when a set of partitions is added</li>
</ul>

<p>No additional work is required to send a notification when a new partition is added: the existing addPartition call will send the notification message. This means that your existing code, when running with 0.2, will automatically send the notifications. </p>

<section>
<title>Notification for a New Partition</title>

<p>To receive notification that a new partition has been added, you need to follow these three steps.</p>
 
 <p>1. To start receiving messages, create a connection to a message bus as shown here:</p>
 <source>
ConnectionFactory connFac = new ActiveMQConnectionFactory(amqurl);
Connection conn = connFac.createConnection();
conn.start();
 </source>
 
  <p>2. Subscribe to a topic you are interested in. When subscribing on a message bus, you need to subscribe to a particular topic to receive the messages that are being delivered on that topic. </p>
  <ul>
  <li>  
  <p>The topic name corresponding to a particular table is stored in table properties and can be retrieved using following piece of code: </p>
 <source>
HiveMetaStoreClient msc = new HiveMetaStoreClient(hiveConf);
String topicName = msc.getTable("mydb", "myTbl").getParameters().get(HCatConstants.HCAT_MSGBUS_TOPIC_NAME);
 </source>
 </li>
  
  <li>  
  <p>Use the topic name to subscribe to a topic as follows: </p>
 <source>
Session session = conn.createSession(true, Session.SESSION_TRANSACTED);
Destination hcatTopic = session.createTopic(topicName);
MessageConsumer consumer = session.createConsumer(hcatTopic);
consumer.setMessageListener(this);
 </source>
 </li>
  </ul>

  <p>3. To start receiving messages you need to implement the JMS interface <code>MessageListener</code>, which, in turn, will make you implement the method <code>onMessage(Message msg)</code>. This method will be called whenever a new message arrives on the message bus. The message contains a partition object representing the corresponding partition, which can be retrieved as shown here: </p>
 <source>
@Override
   public void onMessage(Message msg) {
      // We are interested in only add_partition events on this table.
      // So, check message type first.
      if(msg.getStringProperty(HCatConstants.HCAT_EVENT).equals(HCatConstants.HCAT_ADD_PARTITION_EVENT)){
          Object obj = (((ObjectMessage)msg).getObject());
      }
   }
 </source>
 
  <p>You need to have a JMS jar in your classpath to make this work. Additionally, you need to have a JMS providerâ€™s jar in your classpath. HCatalog uses ActiveMQ as a JMS provider. In principle, any JMS provider can be used in client side; however, ActiveMQ is recommended. ActiveMQ can be obtained from: http://activemq.apache.org/activemq-550-release.html </p>
</section>

<section>
<title>Notification for a Set of Partitions</title>

<p>The example code below illustrates how to send a notification when a set of partitions has been added.</p>

<source>
HiveMetaStoreClient msc = new HiveMetaStoreClient(conf);

// Create a map, specifying partition key names and values
Map&lt;String,String&gt; partMap = new HashMap&lt;String, String&gt;();
partMap.put("date","20110711");
partMap.put("country","*");

// Mark the partition as "done"
msc.markPartitionForEvent("mydb", "mytbl", partMap, PartitionEventType.LOAD_DONE);
</source>

<p>To receive this notification, the consumer needs to do the following:</p>
<ol>
<li>Repeat steps one and two from above to establish the connection to the notification system and to subscribe to the topic.</li>
<li>Receive the notification as shown in this example:
<source>
HiveMetaStoreClient msc = new HiveMetaStoreClient(conf);

// Create a map, specifying partition key names and values
Map&lt;String,String&gt; partMap = new HashMap&lt;String, String&gt;();
partMap.put("date","20110711");
partMap.put("country","*");

// Mark the partition as "done"
msc.markPartitionForEvent("mydb", "mytbl", partMap, PartitionEventType.LOAD_DONE);
</source>
</li>
</ol>



<p>If the consumer has registered with the message bus and is currently live, it will get the callback from the message bus once the producer marks the partition as "done".  Alternatively, the consumer can ask explicitly for a particular partition from the metastore. The following code illustrates the usage from a consumer's perspective:</p>

<source>
// Enquire to metastore whether a particular partition has been marked or not.
boolean marked = msc.isPartitionMarkedForEvent("mydb", "mytbl", partMap, PartitionEventType.LOAD_DONE);

// Or register to a message bus and get asynchronous callback.
ConnectionFactory connFac = new ActiveMQConnectionFactory(amqurl);
Connection conn = connFac.createConnection();
conn.start();
Session session = conn.createSession(true, Session.SESSION_TRANSACTED);
Destination hcatTopic = session.createTopic(topic);
MessageConsumer consumer = session.createConsumer(hcatTopic);
consumer.setMessageListener(this);


public void onMessage(Message msg) {

                                
  MapMessage mapMsg = (MapMessage)msg;
  Enumeration&lt;String&gt; keys = mapMsg.getMapNames();
  
  // Enumerate over all keys. This will print key value pairs specifying the particular partition 
  // which was marked done. In this case, it will print:
  // date : 20110711
  // country: *

  while(keys.hasMoreElements()){
    String key = keys.nextElement();
    System.out.println(key + " : " + mapMsg.getString(key));
  }
  System.out.println("Message: "+msg);
</source>

<p>Notification is enabled by default. To disable notification, you need to leave <code>hive.metastore.event.listeners</code> blank or remove it from <code>hive-site.xml.</code></p>
</section>
    
  </body>
</document>
