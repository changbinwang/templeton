#
# Rakefile - Simple script to run through Templeton calls
#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

require 'cgi'

RakeFileUtils.verbose(true)

SERVER = "http://localhost:50111/templeton/v1"
USERNAME = `whoami`.chomp
USER = ["-d", "user.name=#{USERNAME}"]

TESTS = [:status, :streaming, :jar, :pig, :hive,
         :queue, :queue_delete]

task :default do
  puts "Use rake test to run all the tests"
end

desc "Run all the tests"
task :test do
  TESTS.each do |t|
    Rake::Task[t].invoke
    puts "# ========================"
  end
end

desc "Run status"
task :status do
  curl "status"
end

desc "Run mapreduce/streaming"
task :streaming do
  stamp = `date '+%H%M%S'`.chomp
  curl("mapreduce/streaming",
       *USER,
       "-d", "input=mydata",
       "-d", "output=myoutput-#{stamp}",
       "-d", "statusdir=status-#{stamp}",
       "-d", "mapper=/bin/cat",
       "-d", "reducer=/usr/bin/wc -w")
end

desc "Run mapreduce/jar"
task :jar do
  stamp = `date '+%H%M%S'`.chomp
  curl("mapreduce/jar",
       *USER,
       "-d", "jar=wordcount.jar",
       "-d", "class=org.myorg.WordCount",
       "-d", "libjars=transform.jar,wordcount.jar",
       "-d", "statusdir=wordcount/status-#{stamp}",
       "-d", "arg=wordcount/input",
       "-d", "arg=wordcount/output-#{stamp}")
end

desc "Run pig"
task :pig do
  script = <<EOS
A = load 'passwd' using PigStorage(':');
B = foreach A generate $0 as id;
dump B;
EOS

  curl("pig",
       *USER,
       #"-d", "arg=-secretDebugCmd",
       "-d", "execute=#{CGI.escape script}")
end

desc "Run hive"
task :hive do
  script = "select * from pokes;"

  curl("hive",
       *USER,
       "-d", "execute=#{CGI.escape script}")
end

desc "Prepare the hive table"
task :hive_prepare do
  script = "create table pokes(id INT, bar STRING);"
  curl("hive",
       *USER,
       "-d", "execute=#{CGI.escape script}")

  script = "LOAD DATA LOCAL INPATH '#{Dir.pwd}/etc/testing/pokes.data' " +
    "OVERWRITE INTO TABLE pokes;"
  curl("hive",
       *USER,
       "-d", "execute=#{CGI.escape script}")
end

# Run like rake 'queue[job_201111061521_0018]'
desc "Run queue status"
task :queue, :job_id do |t, args|
  job_id = args[:job_id] || "job_201112140012_0069"
  curl("queue/#{job_id}?user.name=#{USERNAME}")
end

# Run like rake 'queue[job_201111061521_0019]'
desc "Run queue delete"
task :queue_delete, :job_id do |t, args|
  job_id = args[:job_id] || "job_201111061521_0019"
  curl("queue/#{job_id}?user.name=#{USERNAME}", "-X", "DELETE")
end

desc "Run queue list"
task :queue_list do
  curl("queue?user.name=#{USERNAME}")
end

namespace :ddl do
  desc "Run the generic ddl"
  task :plain do
    curl("ddl",
         *USER,
       "-d", "exec=show tables;")
  end

  desc "Create a table using the plain ddl resource"
  task :create_table_ddl do
    curl("ddl",
         *USER,
       "-d", "exec=create table test_table(id BIGINT, price float comment \"The unit price\") \
                partitioned by (country STRING) \
                stored as rcfile;")
  end

  desc "Create a table"
  task :create_table do
    data = <<EOM
{
  "comment": "Best table made today",
  "columns": [
    {
      "name": "id",
      "type": "bigint"
    },
    {
      "name": "price",
      "type": "float",
      "comment": "The unit price"
    }
  ],
  "partitionedBy": [
    {
      "name": "country",
      "type": "string"
    }
  ],
  "format": {
    "storedAs": "rcfile"
  }
}
EOM
    curl("ddl/database/default/table/test_table?user.name=#{USERNAME}",
         "-X", "PUT",
         "-H" "Content-type:application/json",
         "-d", data)


  end

  desc "Create a table like another"
  task :create_table_like do
    curl("ddl/database/default/table/test_table/like/test_table_2?user.name=#{USERNAME}",
         "-X", "PUT",
         "-H" "Content-type:application/json",
         "-d", "{}")
  end

  desc "Drop the test table"
  task :drop_table do
  curl("ddl/database/default/table/test_table?user.name=#{USERNAME}",
       "-X", "DELETE")
  end

  desc "Describe table"
  task :desc_table do
    curl("ddl/database/default/table/test_table?user.name=#{USERNAME}")
  end

  desc "Describe table extended"
  task :desc_table_ext do
    curl("ddl/database/default/table/test_table?user.name=#{USERNAME}&format=extended")
  end

  desc "Add table properties"
  task :add_table_props do
    data = <<EOM
{
  "tableProperties": {
    "fruit": "apple",
    "color": "blue"
  }
}
EOM
    curl("ddl/database/default/table/test_table/property?user.name=#{USERNAME}",
         "-X", "PUT",
         "-H" "Content-type:application/json",
         "-d", data)
  end

  desc "list table properties"
  task :list_table_props do
    curl("ddl/database/default/table/test_table/property?user.name=#{USERNAME}")
  end

  desc "Rename the test table"
  task :rename_table do
    curl("ddl/database/default/table/test_table",
         *USER,
         "-d", "rename=test_table_2")
  end

  desc "List all tables"
  task :list_tables do
    curl("ddl/database/default/table?user.name=#{USERNAME}")
  end

  desc "List some tables"
  task :list_tables_like do
    curl("ddl/database/default/table?user.name=#{USERNAME}&like=my_.*")
  end

  desc "List some more tables"
  task :list_tables_like2 do
    curl("ddl/database/default/table?user.name=#{USERNAME}&like=my_table.")
  end

  desc "List some more tables"
  task :list_tables_like3 do
    curl("ddl/database/default/table?user.name=#{USERNAME}&like=.*_table_.")
  end

  desc "Describe all columns"
  task :desc_columns do
    curl("ddl/database/default/table/test_table/column?user.name=#{USERNAME}")
  end

  desc "Describe one column"
  task :desc_one_column do
    curl("ddl/database/default/table/test_table/column/price?user.name=#{USERNAME}")
  end

  desc "Create a new column"
  task :create_column do
    data = <<EOM
{
  "type": "string",
  "comment": "The brand name"
}
EOM
    curl("ddl/database/default/table/test_table/column/brand?user.name=#{USERNAME}",
         "-X", "PUT",
         "-H" "Content-type:application/json",
         "-d", data)
  end

  desc "List all partitions"
  task :list_partitions do
    curl("ddl/database/default/table/test_table/partition?user.name=#{USERNAME}")
  end

  desc "Describe one partition"
  task :desc_one_partition do
    curl("ddl/database/default/table/test_table/partition/country=%27algeria%27?user.name=#{USERNAME}")
  end

  desc "Create a partition"
  task :create_partition do
    data = <<EOM
{
  "location": "loc_a"
}
EOM
    curl("ddl/database/default/table/test_table/partition/country=%27algeria%27?user.name=#{USERNAME}",
         "-X", "PUT",
         "-H" "Content-type:application/json",
         "-d", data)
  end

  desc "Drop a partition"
  task :drop_partition do
    curl("ddl/database/default/table/test_table/partition/country=%27algeria%27?user.name=#{USERNAME}", "-X", "DELETE")
  end

  desc "Describe database"
  task :desc_db do
    curl("ddl/database/default?user.name=#{USERNAME}")
  end

  desc "Create a database"
  task :create_db do
    data = <<EOM
{
  "comment": "The new database",
  "location": "hdfs://localhost:9000/user/hive/my_warehouse"
}
EOM
    curl("ddl/database/my_db?user.name=#{USERNAME}",
         "-X", "PUT",
         "-H" "Content-type:application/json",
         "-d", data)
  end

  desc "Drop a database"
  task :drop_db do
    curl("ddl/database/my_db?user.name=#{USERNAME}", "-X", "DELETE")
  end

  desc "List databases"
  task :list_dbs do
    curl("ddl/database?user.name=#{USERNAME}")
  end

end

def curl(cmd, *opts)
  args =["curl", "-s",  *opts, "#{SERVER}/#{cmd}"]
  quoted = args.map {|x| quote(x)}.join(" ");
  puts quoted
  sh "#{quoted} | json-pretty-print", {:verbose => false}
end

def quote(s)
  if s.match(/[\s&?]/)
    "'" + s + "'"
  else
    s
  end
end
