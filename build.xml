<?xml version="1.0"?>

<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->


<project name="templeton" default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >
  <!--
    ================================================================================
    Properties and Classpaths Section
    ================================================================================
  -->
  <!-- name and version -->
  <property name="_version" value="0.1.0"/>
  <property name="_vtype" value="-dev"/>
  <property name="templeton.version" value="${_version}${_vtype}"/>
  <property name="templeton.pkg.version" value="${_version}"/>
  <property name="templeton.jar" value="${ant.project.name}-${templeton.version}.jar"/>
  <property name="final.name" value="${ant.project.name}-${templeton.version}" />
  <property name="package.release" value="1"/>

  <!-- build properties -->
  <property environment="env"/>
  <property name="lib.dir" value="${basedir}/lib/" />
  <property name="src.dir"  location="${basedir}/src/java"/>
  <property name="bin.dir"  location="${basedir}/bin"/>
  <property name="resources.dir"  location="${basedir}/src/resources"/>
  <property name="package.dir"  location="${basedir}/src/packages"/>
  <property name="docs.src" value="${basedir}/src/docs"/>
  <property name="build.dir" value="${basedir}/build"/>
  <property name="artifacts.dir" value="${basedir}/artifacts"/>
  <property name="build.classes" value="${build.dir}/classes" />
  <property name="build.docs" value="${build.dir}/docs" />
  <property name="build.javadoc" value="${build.docs}/api" />
  <property name="dist.dir" value="${build.dir}/${final.name}" />
  <property name="webapp.dir" value="${basedir}/src/webapp"/>
  <property name="build.webapp" value="${build.dir}/webapp"/>
  <condition property="forrest.home" value="${env.FORREST_HOME}">
      <isset property="env.FORREST_HOME"/>
  </condition>

  <!-- javac properties -->
  <property name="build.encoding" value="UTF8" />
  <property name="excludes" value=""/>
  <property name="javac.debug" value="on" />
  <property name="javac.optimize" value="on" />
  <property name="javac.deprecation" value="off" />
  <property name="javac.version" value="1.6" />
  <property name="javac.args" value="" />

  <!-- test properties -->
  <property name="test.src.dir" value="${basedir}/src/test" />
  <property name="test.build.dir" value="${build.dir}/test" />
  <property name="test.build.classes" value="${test.build.dir}/classes" />
  <property name="test.log.dir" value="${test.build.dir}/logs" />
  <property name="test.timeout" value="2700000" />
  <property name="test.junit.output.format" value="plain" />
  <property name="test.all.file" value="${test.src.dir}/all-tests"/>
  <property name="test.exclude.file" value="${test.src.dir}/excluded-tests"/>
  <property name="test.output" value="no"/>

  <!-- ivy properties set here -->
  <property name="ivy.repo.dir" value="${user.home}/ivyrepo" />
  <property name="ivy.dir" location="ivy" />
  <loadproperties srcfile="${ivy.dir}/libraries.properties"/>
  <property name="asfrepo" value="https://repository.apache.org"/>
  <property name="asfsnapshotrepo" value="${asfrepo}/content/repositories/snapshots"/>
  <property name="mvnrepo" value="http://repo2.maven.org/maven2"/>
  <property name="asfstagingrepo" value="${asfrepo}/service/local/staging/deploy/maven2"/>
  <property name="ivy.jar" location="${ivy.dir}/ivy-${ivy.version}.jar"/>
  <property name="ant_task.jar" location="${ivy.dir}/maven-ant-tasks-${ant-task.version}.jar"/>
  <property name="ant_task_repo_url"
            value="${mvnrepo}/org/apache/maven/maven-ant-tasks/${ant-task.version}/maven-ant-tasks-${ant-task.version}.jar"/>
  <property name="ivy_repo_url" value="${mvnrepo}/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"/>
  <property name="ivysettings.xml" location="${ivy.dir}/ivysettings.xml" />
  <property name="build.ivy.dir" location="${build.dir}/ivy" />
  <property name="build.ivy.lib.dir" location="${build.ivy.dir}/lib" />
  <property name="ivy.lib.dir" location="${build.ivy.lib.dir}/${ant.project.name}"/>
  <property name="build.ivy.report.dir" location="${build.ivy.dir}/report" />

  <!-- packaging properties -->
  <property name="package.prefix" value="/usr"/>
  <property name="package.conf.dir" value="/etc/templeton"/>
  <property name="package.log.dir" value="/var/log/templeton"/>
  <property name="package.pid.dir" value="/var/run/templeton"/>
  <property name="package.var.dir" value="/var/lib/templeton"/>
  <property name="package.share.dir" value="/share/templeton/${module}"/>
  <property name="package.buildroot" value="/tmp/templeton_package_build_${user.name}"/>
  <property name="package.build.dir" value="/tmp/templeton_package_build_${user.name}/BUILD"/>



  <!-- rats properties -->
  <property name="rat.reporting.classname" value="rat.Report"/>

  <!--this is the naming policy for artifacts we want pulled down-->
  <property name="ivy.artifact.retrieve.pattern" value="${ant.project.name}/[artifact]-[revision](-[classifier]).[ext]"/>

  <path id="test.classpath">
    <pathelement location="${test.build.classes}" />
    <pathelement location="${build.classes}" />
    <pathelement location="conf"/>
    <pathelement location="${templeton.jar}"/>
    <path refid="classpath"/>
  </path>

  <!-- Classpaths for various builds -->
  <path id="classpath">
    <fileset dir="${ivy.lib.dir}" includes="*.jar"/>
  </path>

  <!--
    ================================================================================
    Ivy Section
    ================================================================================
  -->
  <!-- Ivy goop stolen directly from Pig's build.xml -->
  <target name="ivy-init-dirs">
    <mkdir dir="${build.ivy.dir}" />
    <mkdir dir="${build.ivy.lib.dir}" />
    <mkdir dir="${build.ivy.report.dir}" />
  </target>

  <target name="ivy-probe-antlib" >
    <condition property="ivy.found">
      <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
    </condition>
  </target>

  <target name="ivy-download" description="To download ivy" unless="offline">
    <get src="${ivy_repo_url}" dest="${ivy.jar}" usetimestamp="true"/>
  </target>

  <!--
    To avoid Ivy leaking things across big projects, always load Ivy
    in the same classloader.  Also note how we skip loading Ivy if it
    is already there, just to make sure all is well.
  -->
  <target name="ivy-init-antlib" depends="ivy-download,ivy-init-dirs,ivy-probe-antlib" unless="ivy.found">
    <typedef uri="antlib:org.apache.ivy.ant" onerror="fail" loaderRef="ivyLoader">
      <classpath>
        <pathelement location="${ivy.jar}"/>
      </classpath>
    </typedef>
    <fail>
      <condition >
        <not>
          <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
        </not>
      </condition>
      You need Apache Ivy 2.0 or later from http://ant.apache.org/
      It could not be loaded from ${ivy_repo_url}
    </fail>
  </target>

  <target name="ivy-init" depends="ivy-init-antlib" >
    <!--Configure Ivy by reading in the settings file
        If anyone has already read in a settings file into this
        settings ID, it gets priority
    -->
    <ivy:configure settingsid="${ant.project.name}.ivy.settings"
                   file="${ivysettings.xml}" override='false'/>
  </target>

  <target name="ivy-compile" depends="ivy-init" description="Resolve, Retrieve Ivy-managed artifacts for compile configuration">
    <ivy:resolve settingsRef="${ant.project.name}.ivy.settings" conf="common"/>
    <ivy:retrieve settingsRef="${ant.project.name}.ivy.settings"
                  pattern="${build.ivy.lib.dir}/${ivy.artifact.retrieve.pattern}" conf="common"/>
    <ivy:cachepath pathid="compile.classpath" conf="common"/>
  </target>

  <target name="ivy-package" depends="ivy-init"
          description="Retrieve Ivy-managed artifacts for the package configurations">
    <ivy:resolve settingsRef="${ant.project.name}.ivy.settings" conf="package"/>
    <ivy:retrieve settingsRef="${ant.project.name}.ivy.settings"
                  pattern="${build.ivy.lib.dir}/${ivy.artifact.retrieve.pattern}" conf="package"/>
    <ivy:cachepath pathid="package.classpath" conf="package"/>
  </target>

  <target name="ivy-releaseaudit" depends="ivy-init" description="Resolve, Retrieve Ivy-managed artifacts for releaseaudit configuration">
    <ivy:resolve settingsRef="${ant.project.name}.ivy.settings" conf="releaseaudit"/>
    <ivy:retrieve settingsRef="${ant.project.name}.ivy.settings"
                  pattern="${build.ivy.lib.dir}/${ivy.artifact.retrieve.pattern}" conf="releaseaudit"/>
    <ivy:cachepath pathid="releaseaudit.classpath" conf="releaseaudit"/>
  </target>

  <target name="init" depends="ivy-compile, ivy-package" >
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${build.classes}" />
    <mkdir dir="${test.build.classes}" />
  </target>

  <!--
    ================================================================================
    Main Build and Jar Section
    ================================================================================
  -->
  <!-- Build Templeton src files -->
  <target name="compile-src" depends="init">
    <javac encoding="${build.encoding}" srcdir="${src.dir}" excludes="${excludes}"
           includes="**/*.java" destdir="${build.classes}" debug="${javac.debug}"
           optimize="${javac.optimize}" target="${javac.version}"
           source="${javac.version}" deprecation="${javac.deprecation}"
           includeantruntime="false">
      <compilerarg line="${javac.args}"/>
      <classpath refid="classpath" />
    </javac>
  </target>

  <!-- Build Templeton resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.classes}"/>
    <copy todir="${build.classes}/">
      <fileset dir="${resources.dir}" />
    </copy>

  </target>

  <target name="compile" depends="compile-src, compile-resources">
  </target>

  <!-- Build the templeton client jar -->
  <target name="jar" depends="compile">
    <jar jarfile="${build.dir}/${ant.project.name}/${templeton.jar}">
      <fileset dir="${build.classes}" />
    </jar>
  </target>

  <!--
    ================================================================================
    Test Section
    ================================================================================
  -->
  <!-- Build Templeton test files -->
  <target name="compile-test" depends="jar">
    <javac encoding="${build.encoding}" srcdir="${test.src.dir}" excludes="${excludes}"
           includes="**/*.java" destdir="${test.build.classes}" debug="${javac.debug}"
           optimize="${javac.optimize}" target="${javac.version}"
           source="${javac.version}" deprecation="${javac.deprecation}"
           includeantruntime="false">
      <compilerarg line="${javac.args}"/>
      <classpath refid="test.classpath" />
    </javac>
  </target>

  <target name="test" depends="compile-test">
    <sequential>
      <delete dir="${test.log.dir}"/>
      <mkdir dir="${test.log.dir}"/>
      <junit showoutput="${test.output}" printsummary="yes" haltonfailure="no"
             fork="yes" maxmemory="512m" dir="${basedir}" timeout="${test.timeout}"
             errorProperty="tests.failed" failureProperty="tests.failed">
        <classpath>
          <pathelement location="${test.build.classes}" />
          <pathelement location="." />
          <path refid="test.classpath"/>
        </classpath>
        <formatter type="${test.junit.output.format}" />
        <!-- If the user has not defined a particular test to run, run them all -->
        <batchtest fork="yes" todir="${test.log.dir}" unless="testcase">
          <fileset dir="src/test">
            <patternset>
              <includesfile name="${test.all.file}"/>
              <excludesfile name="${test.exclude.file}"/>
            </patternset>
          </fileset>
        </batchtest>
        <!-- Run one test case.  To use this define -Dtestcase=X on the command line -->
        <batchtest fork="yes" todir="${test.log.dir}" if="testcase">
          <fileset dir="src/test" includes="**/${testcase}.java"/>
        </batchtest>

        <assertions>
          <enable />
        </assertions>

      </junit>
      <fail if="tests.failed">Tests failed!</fail>
    </sequential>
  </target>

  <!--
    ================================================================================
    Clean Section
    ================================================================================
  -->
  <!-- Clean up children -->
  <target name="clean-builds" description="Cleanup build">
    <delete dir="${build.dir}" />
  </target>

  <!-- Clean up children -->
  <target name="clean" depends="clean-builds" description="Cleanup all build artifacts">
    <delete dir="${artifacts.dir}" />
  </target>

  <!--
    ================================================================================
    Docs Section
    ================================================================================
    -->
  <target name="docs" depends="javadoc, forrest.check" description="Generate forrest-based documentation. To use, specify -Dforrest.home=&lt;base of Apache Forrest installation&gt; on the command line." if="forrest.home">
    <exec dir="${docs.src}" executable="${forrest.home}/bin/forrest" failonerror="true">
      <arg line="-Dproject.build-dir=${build.docs}" />
    </exec>
  </target>

  <target name="forrest.check" >
    <fail message="'forrest.home' is not defined. Please pass -Dforrest.home=&lt;base of Apache Forrest installation&gt; to Ant on the command-line."
          unless="forrest.home"/>
  </target>

  <target name="javadoc" depends="jar" description="Create documentation">
    <mkdir dir="${build.javadoc}" />
    <javadoc packagenames="org.apache.hcatalog.templeton.*" destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="Templeton ${templeton.version} API" doctitle="Templeton ${templeton.version} API">
      <packageset dir="${src.dir}" />
      <classpath>
        <path refid="classpath" />
      </classpath>
      <group title="templeton" packages="org.apache.hcatalog.templeton.*" />
    </javadoc>
  </target>

  <!-- ================================================================== -->
  <!-- Copy files to a releasable structure                               -->
  <!-- ================================================================== -->
  <target name="package-tar" depends="docs">

    <copy file="${resources.dir}/templeton-default.xml"
          tofile="${dist.dir}/conf/templeton-site.xml" />

    <copy file="${build.dir}/${ant.project.name}/${templeton.jar}" todir="${dist.dir}/" />

    <copy todir="${dist.dir}/docs">
      <fileset dir="${build.docs}"> 
	<exclude name="webapp/**" />
	<exclude name="tmp/**" />
      </fileset>
    </copy>
    <copy todir="${dist.dir}/lib">
        <fileset dir="${ivy.lib.dir}" >
	  <exclude name="hadoop*jar"/>
	  <exclude name="hadoop*jar"/>
	  <exclude name="junit*jar"/>
	</fileset>  
    </copy>

    <copy todir="${dist.dir}/">
      <fileset dir="${basedir}/src/hadoop_temp_fix" >
        <include name="ugi.jar" />
      </fileset>
    </copy>

    <copy todir="${dist.dir}/src" includeEmptyDirs="true">
        <fileset dir="${src.dir}" />
    </copy>

    <copy todir="${dist.dir}/sbin" >
      <fileset dir="${package.dir}">
        <include name="*.sh"/>
      </fileset>
      <fileset dir="${bin.dir}">
        <include name="templeton_server.sh"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/libexec" >
      <fileset dir="${bin.dir}">
        <include name="templeton_config.sh"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/test" includeEmptyDirs="true">
      <fileset dir="${test.src.dir}" />
    </copy>

    <copy todir="${dist.dir}/docs">
      <fileset dir=".">
        <include name="*.txt" />
       </fileset>
    </copy>

    <copy todir="${dist.dir}/" file="build.xml" /> 

    <chmod perm="ugo+x" dir= "${dist.dir}/sbin/" includes="**/*.sh" />

  </target>

  <!-- ================================================================== -->
  <!-- Copy files to a releasable structure                               -->
  <!-- ================================================================== -->
  <target name="package-rpm" depends="docs">
    <mkdir dir="${build.docs}" /> 

    <copy file="${resources.dir}/templeton-default.xml"
          tofile="${dist.dir}/etc/templeton/templeton-site.xml" />

    <copy file="${build.dir}/${ant.project.name}/${templeton.jar}" todir="${dist.dir}/share/templeton/" />

    <copy todir="${dist.dir}/share/doc/templeton">
      <fileset dir="${build.docs}"> 
	<exclude name="webapp/**" />
	<exclude name="tmp/**" />
      </fileset>
    </copy>

    <copy todir="${dist.dir}/lib">
        <fileset dir="${ivy.lib.dir}" >
	  <exclude name="hadoop*jar"/>
	  <exclude name="hadoop*jar"/>
	  <exclude name="junit*jar"/>
	</fileset>  
    </copy>

    <copy todir="${dist.dir}/libexec" >
      <fileset dir="${bin.dir}">
        <include name="templeton_config.sh"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/sbin" >
      <fileset dir="${bin.dir}">
        <include name="templeton_server.sh"/>
      </fileset>
    </copy>


    <copy todir="${dist.dir}/share/templeton/">
      <fileset dir="${basedir}/src/hadoop_temp_fix" >
        <include name="ugi.jar" />
      </fileset>
    </copy>

    <copy todir="${dist.dir}/share/templeton/test" includeEmptyDirs="true">
        <fileset dir="${test.src.dir}" />
    </copy>

    <copy todir="${dist.dir}/share/doc/templeton">
        <fileset dir=".">
          <include name="*.txt" />
        </fileset>
    </copy>

    <copy todir="${dist.dir}/share/templeton/templates/conf">
      <fileset dir="src/packages/templates/conf"/>
    </copy>

    <chmod perm="ugo+x" dir= "${dist.dir}/sbin/" includes="**/*.sh" />

  </target>


  <!-- ================================================================== -->
  <!-- Create a tar file                                                  -->
  <!-- ================================================================== -->
  <target name="tar" depends="package-tar">
    <tar compression="gzip" longfile="gnu" destfile="${build.dir}/${final.name}.tar.gz">

      <tarfileset dir="${build.dir}" mode="664">
          <exclude name="${final.name}/sbin/*" />
          <include name="${final.name}/**" />
      </tarfileset>
      <tarfileset dir="${build.dir}" mode="755">
          <include name="${final.name}/sbin/*" />
      </tarfileset>

    </tar>
  </target>

  <target name="tar-rpm" depends="package-rpm" description="Create rpm package tarball">
    <tar compression="gzip" longfile="gnu" destfile="${build.dir}/${final.name}.tar.gz">
      <tarfileset dir="${build.dir}" mode="664">
        <exclude name="${final.name}/sbin/*" />
        <include name="${final.name}/**" />
      </tarfileset>
      <tarfileset dir="${build.dir}" mode="755">
        <include name="${final.name}/sbin/*" />
      </tarfileset>
    </tar>
  </target>



  <target name="rpm" depends="tar-rpm" description="Make rpm package">
    <mkdir dir="${package.buildroot}/BUILD" />
    <mkdir dir="${package.buildroot}/RPMS" />
    <mkdir dir="${package.buildroot}/SRPMS" />
    <mkdir dir="${package.buildroot}/SOURCES" />
    <mkdir dir="${package.buildroot}/SPECS" />
    <copy todir="${package.buildroot}/SOURCES">
      <fileset dir="${build.dir}">
        <include name="${final.name}.tar.gz" />
      </fileset>
    </copy>
    <copy file="${package.dir}/rpm/spec/templeton.spec" todir="${package.buildroot}/SPECS">
      <filterchain>
        <replacetokens>
          <token key="final.name" value="${final.name}" />
          <token key="version" value="${templeton.pkg.version}" />
          <token key="package.release" value="${package.release}" />
          <token key="package.build.dir" value="${package.build.dir}" />
          <token key="package.prefix" value="${package.prefix}" />
          <token key="package.conf.dir" value="${package.conf.dir}" />
          <token key="package.log.dir" value="${package.log.dir}" />
        </replacetokens>
      </filterchain>
    </copy>
    <rpm specFile="templeton.spec" command="-bb --target ${os.arch}" topDir="${package.buildroot}" cleanBuildDir="true" failOnError="true"/>
    <copy todir="${build.dir}/" flatten="true" failonerror="true">
      <fileset dir="${package.buildroot}/RPMS">
        <include name="**/templeton*.rpm" />
      </fileset>
    </copy>
    <delete dir="${package.buildroot}" quiet="true" verbose="false"/>
  </target>


</project>
